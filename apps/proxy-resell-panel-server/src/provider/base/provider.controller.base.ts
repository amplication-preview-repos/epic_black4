/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProviderService } from "../provider.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProviderCreateInput } from "./ProviderCreateInput";
import { Provider } from "./Provider";
import { ProviderFindManyArgs } from "./ProviderFindManyArgs";
import { ProviderWhereUniqueInput } from "./ProviderWhereUniqueInput";
import { ProviderUpdateInput } from "./ProviderUpdateInput";
import { ProxyFindManyArgs } from "../../proxy/base/ProxyFindManyArgs";
import { Proxy } from "../../proxy/base/Proxy";
import { ProxyWhereUniqueInput } from "../../proxy/base/ProxyWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProviderControllerBase {
  constructor(
    protected readonly service: ProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Provider })
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProvider(
    @common.Body() data: ProviderCreateInput
  ): Promise<Provider> {
    return await this.service.createProvider({
      data: data,
      select: {
        apiKey: true,
        apiUrl: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Provider] })
  @ApiNestedQuery(ProviderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async providers(@common.Req() request: Request): Promise<Provider[]> {
    const args = plainToClass(ProviderFindManyArgs, request.query);
    return this.service.providers({
      ...args,
      select: {
        apiKey: true,
        apiUrl: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Provider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async provider(
    @common.Param() params: ProviderWhereUniqueInput
  ): Promise<Provider | null> {
    const result = await this.service.provider({
      where: params,
      select: {
        apiKey: true,
        apiUrl: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Provider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProvider(
    @common.Param() params: ProviderWhereUniqueInput,
    @common.Body() data: ProviderUpdateInput
  ): Promise<Provider | null> {
    try {
      return await this.service.updateProvider({
        where: params,
        data: data,
        select: {
          apiKey: true,
          apiUrl: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Provider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProvider(
    @common.Param() params: ProviderWhereUniqueInput
  ): Promise<Provider | null> {
    try {
      return await this.service.deleteProvider({
        where: params,
        select: {
          apiKey: true,
          apiUrl: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/proxies")
  @ApiNestedQuery(ProxyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Proxy",
    action: "read",
    possession: "any",
  })
  async findProxies(
    @common.Req() request: Request,
    @common.Param() params: ProviderWhereUniqueInput
  ): Promise<Proxy[]> {
    const query = plainToClass(ProxyFindManyArgs, request.query);
    const results = await this.service.findProxies(params.id, {
      ...query,
      select: {
        country: true,
        createdAt: true,
        id: true,
        ip: true,
        port: true,

        provider: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/proxies")
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "update",
    possession: "any",
  })
  async connectProxies(
    @common.Param() params: ProviderWhereUniqueInput,
    @common.Body() body: ProxyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proxies: {
        connect: body,
      },
    };
    await this.service.updateProvider({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/proxies")
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "update",
    possession: "any",
  })
  async updateProxies(
    @common.Param() params: ProviderWhereUniqueInput,
    @common.Body() body: ProxyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proxies: {
        set: body,
      },
    };
    await this.service.updateProvider({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/proxies")
  @nestAccessControl.UseRoles({
    resource: "Provider",
    action: "update",
    possession: "any",
  })
  async disconnectProxies(
    @common.Param() params: ProviderWhereUniqueInput,
    @common.Body() body: ProxyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      proxies: {
        disconnect: body,
      },
    };
    await this.service.updateProvider({
      where: params,
      data,
      select: { id: true },
    });
  }
}
