/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Proxy as PrismaProxy,
  Provider as PrismaProvider,
} from "@prisma/client";

export class ProxyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProxyCountArgs, "select">): Promise<number> {
    return this.prisma.proxy.count(args);
  }

  async proxies<T extends Prisma.ProxyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProxyFindManyArgs>
  ): Promise<PrismaProxy[]> {
    return this.prisma.proxy.findMany<Prisma.ProxyFindManyArgs>(args);
  }
  async proxy<T extends Prisma.ProxyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProxyFindUniqueArgs>
  ): Promise<PrismaProxy | null> {
    return this.prisma.proxy.findUnique(args);
  }
  async createProxy<T extends Prisma.ProxyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProxyCreateArgs>
  ): Promise<PrismaProxy> {
    return this.prisma.proxy.create<T>(args);
  }
  async updateProxy<T extends Prisma.ProxyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProxyUpdateArgs>
  ): Promise<PrismaProxy> {
    return this.prisma.proxy.update<T>(args);
  }
  async deleteProxy<T extends Prisma.ProxyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProxyDeleteArgs>
  ): Promise<PrismaProxy> {
    return this.prisma.proxy.delete(args);
  }

  async getProvider(parentId: string): Promise<PrismaProvider | null> {
    return this.prisma.proxy
      .findUnique({
        where: { id: parentId },
      })
      .provider();
  }
}
